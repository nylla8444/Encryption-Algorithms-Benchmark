/**
 * Benchmark.min.js - Minimal benchmarking library for JavaScript
 * Used for measuring performance of code execution
 * 
 * This is a simplified version focusing only on the functions needed for this project
 */

(function(global){var Benchmark=function(name,fn,options){this.name=name;this.fn=fn;this.options=options||{};this.stats={};this.times=[];this.running=false;};Benchmark.prototype={run:function(count){count=count||5;this.running=true;this.times=[];var startTime,endTime,totalTime=0;for(var i=0;i<count;i++){startTime=performance.now();this.fn();endTime=performance.now();var elapsed=endTime-startTime;this.times.push(elapsed);totalTime+=elapsed;}this.running=false;this._calculateStats();return this;},_calculateStats:function(){var n=this.times.length;if(n===0)return;var sum=0,sumsq=0,min=Infinity,max=-Infinity;for(var i=0;i<n;i++){var x=this.times[i];sum+=x;sumsq+=x*x;min=Math.min(min,x);max=Math.max(max,x);}var mean=sum/n;var variance=sumsq/n-mean*mean;this.stats={mean:mean,variance:variance,deviation:Math.sqrt(variance),sem:Math.sqrt(variance/n),min:min,max:max,count:n};return this.stats;},compare:function(other){if(!this.stats.mean||!other.stats.mean)return NaN;return(this.stats.mean-other.stats.mean)/this.stats.mean;},toString:function(){return this.name+': '+(this.stats.mean||0).toFixed(3)+'ms';}};Benchmark.Suite=function(name,options){this.name=name||'';this.options=options||{};this.benchmarks=[];};Benchmark.Suite.prototype={add:function(name,fn,options){this.benchmarks.push(new Benchmark(name,fn,options));return this;},run:function(options){options=options||{};var count=options.count||5;for(var i=0;i<this.benchmarks.length;i++){this.benchmarks[i].run(count);}return this;},filter:function(pattern){var filtered=new Benchmark.Suite(this.name+' (filtered)');for(var i=0;i<this.benchmarks.length;i++){var b=this.benchmarks[i];if(pattern.test(b.name)){filtered.benchmarks.push(b);}}return filtered;}};global.Benchmark=Benchmark;})(typeof global!=='undefined'?global:this);